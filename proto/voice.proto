syntax = "proto3";

package voice;

// Keep the go_package option
option go_package = "./proto;pb";

// WHISPER

// Audio → Transcript + Generation + TTS
service WhisperService {
  // Client streams AudioChunk → server, server streams back StreamAudioResponse
  rpc StreamAudio (stream AudioChunk) returns (stream StreamAudioResponse);
}

message AudioChunk {
  bytes data         = 1;
  bool   speech_start = 2;
  bool   speech_end   = 3;
}

// Combined response for Whisper, Llama, and TTS outputs
message StreamAudioResponse {
  enum Source {
    WHISPER = 0;  // comes from the transcription service
    LLAMA   = 1;  // comes from the text-generation service
    TTS     = 2;  // comes from the text-to-speech service
  }

  // Text content (from Whisper or Llama)
  string text   = 1;        // partial transcription or generated text
  bool   done   = 2;        // true on the final chunk (from Llama)
  
  // Audio content (from TTS)
  bytes  audio_data = 3;    // raw audio data (only when source is TTS)
  int32  sample_rate = 4;   // sample rate of the audio
  bool   is_end_audio = 5;  // true when this is the final audio chunk
  
  Source source = 6;        // which service produced this message
}

// LLAMA

service LlamaService {
  rpc Generate (GenerateRequest) returns (stream GenerateResponse);
}

message GenerateRequest {
  string prompt      = 1;
  int32  max_tokens  = 2;
  float  temperature = 3;
  float  top_p       = 4;
}

message GenerateResponse {
  string text = 1;
  bool   done = 2;
}

// TTS

service TextToSpeech {
  // Streaming text to audio conversion
  rpc SynthesizeStreamingText(stream TextRequest) returns (stream AudioResponse) {}
  
  // Simple non-streaming version for basic functionality
  rpc SynthesizeText(TextRequest) returns (stream AudioResponse) {}
}

// Text input for synthesis
message TextRequest {
  string text = 1;
  
  // Optional parameters
  float speaking_rate = 2;  // 1.0 is normal speed
  float pitch = 3;          // 1.0 is normal pitch
  string voice_name = 4;    // Default voice if empty
}

// Audio response from synthesis
message AudioResponse {
  bytes audio_chunk = 1;    // Raw audio data chunk
  int32 sample_rate = 2;    // Sample rate of the audio
  string audio_format = 3;  // Format like "wav", "raw"
  bool is_end = 4;          // Indicates end of stream
}