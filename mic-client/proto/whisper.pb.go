// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: proto/whisper.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AudioChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	SpeechStart   bool                   `protobuf:"varint,2,opt,name=speech_start,json=speechStart,proto3" json:"speech_start,omitempty"` // Indicates the start of a speech segment
	SpeechEnd     bool                   `protobuf:"varint,3,opt,name=speech_end,json=speechEnd,proto3" json:"speech_end,omitempty"`       // Indicates the end of a speech segment
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AudioChunk) Reset() {
	*x = AudioChunk{}
	mi := &file_proto_whisper_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AudioChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AudioChunk) ProtoMessage() {}

func (x *AudioChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_whisper_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AudioChunk.ProtoReflect.Descriptor instead.
func (*AudioChunk) Descriptor() ([]byte, []int) {
	return file_proto_whisper_proto_rawDescGZIP(), []int{0}
}

func (x *AudioChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *AudioChunk) GetSpeechStart() bool {
	if x != nil {
		return x.SpeechStart
	}
	return false
}

func (x *AudioChunk) GetSpeechEnd() bool {
	if x != nil {
		return x.SpeechEnd
	}
	return false
}

type Transcription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Text          string                 `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Transcription) Reset() {
	*x = Transcription{}
	mi := &file_proto_whisper_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Transcription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Transcription) ProtoMessage() {}

func (x *Transcription) ProtoReflect() protoreflect.Message {
	mi := &file_proto_whisper_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Transcription.ProtoReflect.Descriptor instead.
func (*Transcription) Descriptor() ([]byte, []int) {
	return file_proto_whisper_proto_rawDescGZIP(), []int{1}
}

func (x *Transcription) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

var File_proto_whisper_proto protoreflect.FileDescriptor

const file_proto_whisper_proto_rawDesc = "" +
	"\n" +
	"\x13proto/whisper.proto\x12\awhisper\"b\n" +
	"\n" +
	"AudioChunk\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\x12!\n" +
	"\fspeech_start\x18\x02 \x01(\bR\vspeechStart\x12\x1d\n" +
	"\n" +
	"speech_end\x18\x03 \x01(\bR\tspeechEnd\"#\n" +
	"\rTranscription\x12\x12\n" +
	"\x04text\x18\x01 \x01(\tR\x04text2P\n" +
	"\x0eWhisperService\x12>\n" +
	"\vStreamAudio\x12\x13.whisper.AudioChunk\x1a\x16.whisper.Transcription(\x010\x01B\fZ\n" +
	"./proto;pbb\x06proto3"

var (
	file_proto_whisper_proto_rawDescOnce sync.Once
	file_proto_whisper_proto_rawDescData []byte
)

func file_proto_whisper_proto_rawDescGZIP() []byte {
	file_proto_whisper_proto_rawDescOnce.Do(func() {
		file_proto_whisper_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_whisper_proto_rawDesc), len(file_proto_whisper_proto_rawDesc)))
	})
	return file_proto_whisper_proto_rawDescData
}

var file_proto_whisper_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_proto_whisper_proto_goTypes = []any{
	(*AudioChunk)(nil),    // 0: whisper.AudioChunk
	(*Transcription)(nil), // 1: whisper.Transcription
}
var file_proto_whisper_proto_depIdxs = []int32{
	0, // 0: whisper.WhisperService.StreamAudio:input_type -> whisper.AudioChunk
	1, // 1: whisper.WhisperService.StreamAudio:output_type -> whisper.Transcription
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_whisper_proto_init() }
func file_proto_whisper_proto_init() {
	if File_proto_whisper_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_whisper_proto_rawDesc), len(file_proto_whisper_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_whisper_proto_goTypes,
		DependencyIndexes: file_proto_whisper_proto_depIdxs,
		MessageInfos:      file_proto_whisper_proto_msgTypes,
	}.Build()
	File_proto_whisper_proto = out.File
	file_proto_whisper_proto_goTypes = nil
	file_proto_whisper_proto_depIdxs = nil
}
