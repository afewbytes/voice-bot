// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: voice.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WhisperService_StreamAudio_FullMethodName = "/voice.WhisperService/StreamAudio"
)

// WhisperServiceClient is the client API for WhisperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Audio → Transcript + Generation
type WhisperServiceClient interface {
	// Client streams AudioChunk → server, server streams back StreamAudioResponse
	StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, StreamAudioResponse], error)
}

type whisperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWhisperServiceClient(cc grpc.ClientConnInterface) WhisperServiceClient {
	return &whisperServiceClient{cc}
}

func (c *whisperServiceClient) StreamAudio(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[AudioChunk, StreamAudioResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WhisperService_ServiceDesc.Streams[0], WhisperService_StreamAudio_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[AudioChunk, StreamAudioResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WhisperService_StreamAudioClient = grpc.BidiStreamingClient[AudioChunk, StreamAudioResponse]

// WhisperServiceServer is the server API for WhisperService service.
// All implementations must embed UnimplementedWhisperServiceServer
// for forward compatibility.
//
// Audio → Transcript + Generation
type WhisperServiceServer interface {
	// Client streams AudioChunk → server, server streams back StreamAudioResponse
	StreamAudio(grpc.BidiStreamingServer[AudioChunk, StreamAudioResponse]) error
	mustEmbedUnimplementedWhisperServiceServer()
}

// UnimplementedWhisperServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWhisperServiceServer struct{}

func (UnimplementedWhisperServiceServer) StreamAudio(grpc.BidiStreamingServer[AudioChunk, StreamAudioResponse]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAudio not implemented")
}
func (UnimplementedWhisperServiceServer) mustEmbedUnimplementedWhisperServiceServer() {}
func (UnimplementedWhisperServiceServer) testEmbeddedByValue()                        {}

// UnsafeWhisperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WhisperServiceServer will
// result in compilation errors.
type UnsafeWhisperServiceServer interface {
	mustEmbedUnimplementedWhisperServiceServer()
}

func RegisterWhisperServiceServer(s grpc.ServiceRegistrar, srv WhisperServiceServer) {
	// If the following call pancis, it indicates UnimplementedWhisperServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WhisperService_ServiceDesc, srv)
}

func _WhisperService_StreamAudio_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WhisperServiceServer).StreamAudio(&grpc.GenericServerStream[AudioChunk, StreamAudioResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WhisperService_StreamAudioServer = grpc.BidiStreamingServer[AudioChunk, StreamAudioResponse]

// WhisperService_ServiceDesc is the grpc.ServiceDesc for WhisperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WhisperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.WhisperService",
	HandlerType: (*WhisperServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamAudio",
			Handler:       _WhisperService_StreamAudio_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "voice.proto",
}

const (
	LlamaService_Generate_FullMethodName = "/voice.LlamaService/Generate"
)

// LlamaServiceClient is the client API for LlamaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LlamaServiceClient interface {
	Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateResponse], error)
}

type llamaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLlamaServiceClient(cc grpc.ClientConnInterface) LlamaServiceClient {
	return &llamaServiceClient{cc}
}

func (c *llamaServiceClient) Generate(ctx context.Context, in *GenerateRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GenerateResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &LlamaService_ServiceDesc.Streams[0], LlamaService_Generate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GenerateRequest, GenerateResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlamaService_GenerateClient = grpc.ServerStreamingClient[GenerateResponse]

// LlamaServiceServer is the server API for LlamaService service.
// All implementations must embed UnimplementedLlamaServiceServer
// for forward compatibility.
type LlamaServiceServer interface {
	Generate(*GenerateRequest, grpc.ServerStreamingServer[GenerateResponse]) error
	mustEmbedUnimplementedLlamaServiceServer()
}

// UnimplementedLlamaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLlamaServiceServer struct{}

func (UnimplementedLlamaServiceServer) Generate(*GenerateRequest, grpc.ServerStreamingServer[GenerateResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Generate not implemented")
}
func (UnimplementedLlamaServiceServer) mustEmbedUnimplementedLlamaServiceServer() {}
func (UnimplementedLlamaServiceServer) testEmbeddedByValue()                      {}

// UnsafeLlamaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LlamaServiceServer will
// result in compilation errors.
type UnsafeLlamaServiceServer interface {
	mustEmbedUnimplementedLlamaServiceServer()
}

func RegisterLlamaServiceServer(s grpc.ServiceRegistrar, srv LlamaServiceServer) {
	// If the following call pancis, it indicates UnimplementedLlamaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LlamaService_ServiceDesc, srv)
}

func _LlamaService_Generate_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GenerateRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LlamaServiceServer).Generate(m, &grpc.GenericServerStream[GenerateRequest, GenerateResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type LlamaService_GenerateServer = grpc.ServerStreamingServer[GenerateResponse]

// LlamaService_ServiceDesc is the grpc.ServiceDesc for LlamaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LlamaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "voice.LlamaService",
	HandlerType: (*LlamaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Generate",
			Handler:       _LlamaService_Generate_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "voice.proto",
}
